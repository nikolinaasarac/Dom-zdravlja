// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DomZdravljaContext))]
    [Migration("20251101132414_AddZdravstvenaStanja")]
    partial class AddZdravstvenaStanja
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("API.Entities.Doktor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BrojLicence")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MaticniBroj")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Specijalizacija")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Doktori");
                });

            modelBuilder.Entity("API.Entities.Korisnik", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DoktorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PacijentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TehnicarId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.HasIndex("PacijentId");

                    b.HasIndex("TehnicarId");

                    b.ToTable("Korisnici");
                });

            modelBuilder.Entity("API.Entities.Pacijent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DatumRodjenja")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MaticniBroj")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Pacijenti");
                });

            modelBuilder.Entity("API.Entities.Pregled", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatumPregleda")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dijagnoza")
                        .HasColumnType("TEXT");

                    b.Property<int>("DoktorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Napomena")
                        .HasColumnType("TEXT");

                    b.Property<string>("OpisSimptoma")
                        .HasColumnType("TEXT");

                    b.Property<int>("PacijentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Terapija")
                        .HasColumnType("TEXT");

                    b.Property<string>("VrstaPregleda")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ZahtjevZaPregledId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.HasIndex("PacijentId");

                    b.HasIndex("ZahtjevZaPregledId");

                    b.ToTable("Pregledi");
                });

            modelBuilder.Entity("API.Entities.Recept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatumIzdavanja")
                        .HasColumnType("TEXT");

                    b.Property<int>("DoktorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Kolicina")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NacinUzimanja")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Napomena")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NazivLijeka")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PacijentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.HasIndex("PacijentId");

                    b.ToTable("Recepti");
                });

            modelBuilder.Entity("API.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("KorisnikId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Revoked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("API.Entities.Tehnicar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MaticniBroj")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tehnicari");
                });

            modelBuilder.Entity("API.Entities.Uputnica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatumIzdavanja")
                        .HasColumnType("TEXT");

                    b.Property<string>("Dijagnoza")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DoktorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PacijentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpucujeSe")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.HasIndex("PacijentId");

                    b.ToTable("Uputnice");
                });

            modelBuilder.Entity("API.Entities.Vakcinacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DatumPrimanja")
                        .HasColumnType("TEXT");

                    b.Property<int>("Doza")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Napomena")
                        .HasColumnType("TEXT");

                    b.Property<string>("NazivVakcine")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PacijentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PacijentId");

                    b.ToTable("Vakcinacije");
                });

            modelBuilder.Entity("API.Entities.ZdravstvenoStanje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatumDijagnoze")
                        .HasColumnType("TEXT");

                    b.Property<string>("Napomena")
                        .HasColumnType("TEXT");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PacijentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PacijentId");

                    b.ToTable("ZdravstvenaStanja");
                });

            modelBuilder.Entity("Nalaz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatumDodavanja")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<int>("PacijentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TehnicarId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ZahtjevZaAnalizuId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PacijentId");

                    b.HasIndex("TehnicarId");

                    b.HasIndex("ZahtjevZaAnalizuId");

                    b.ToTable("Nalazi");
                });

            modelBuilder.Entity("ZahtjevZaAnalizu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatumZahtjeva")
                        .HasColumnType("TEXT");

                    b.Property<int>("DoktorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PacijentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TehnicarId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.HasIndex("PacijentId");

                    b.HasIndex("TehnicarId");

                    b.ToTable("ZahtjeviZaAnalizu");
                });

            modelBuilder.Entity("ZahtjevZaPregled", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DatumZahtjeva")
                        .HasColumnType("TEXT");

                    b.Property<int>("DoktorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PacijentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.HasIndex("PacijentId");

                    b.ToTable("ZahtjeviZaPregled");
                });

            modelBuilder.Entity("API.Entities.Korisnik", b =>
                {
                    b.HasOne("API.Entities.Doktor", "Doktor")
                        .WithMany()
                        .HasForeignKey("DoktorId");

                    b.HasOne("API.Entities.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId");

                    b.HasOne("API.Entities.Tehnicar", "Tehnicar")
                        .WithMany()
                        .HasForeignKey("TehnicarId");

                    b.Navigation("Doktor");

                    b.Navigation("Pacijent");

                    b.Navigation("Tehnicar");
                });

            modelBuilder.Entity("API.Entities.Pregled", b =>
                {
                    b.HasOne("API.Entities.Doktor", "Doktor")
                        .WithMany("Pregledi")
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Pacijent", "Pacijent")
                        .WithMany("Pregledi")
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZahtjevZaPregled", "ZahtjevZaPregled")
                        .WithMany()
                        .HasForeignKey("ZahtjevZaPregledId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Pacijent");

                    b.Navigation("ZahtjevZaPregled");
                });

            modelBuilder.Entity("API.Entities.Recept", b =>
                {
                    b.HasOne("API.Entities.Doktor", "Doktor")
                        .WithMany()
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("API.Entities.RefreshToken", b =>
                {
                    b.HasOne("API.Entities.Korisnik", "Korisnik")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("API.Entities.Uputnica", b =>
                {
                    b.HasOne("API.Entities.Doktor", "Doktor")
                        .WithMany()
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("API.Entities.Vakcinacija", b =>
                {
                    b.HasOne("API.Entities.Pacijent", "Pacijent")
                        .WithMany("Vakcinacije")
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("API.Entities.ZdravstvenoStanje", b =>
                {
                    b.HasOne("API.Entities.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("Nalaz", b =>
                {
                    b.HasOne("API.Entities.Pacijent", "Pacijent")
                        .WithMany("Nalazi")
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Tehnicar", "Tehnicar")
                        .WithMany("Nalazi")
                        .HasForeignKey("TehnicarId");

                    b.HasOne("ZahtjevZaAnalizu", "ZahtjevZaAnalizu")
                        .WithMany()
                        .HasForeignKey("ZahtjevZaAnalizuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pacijent");

                    b.Navigation("Tehnicar");

                    b.Navigation("ZahtjevZaAnalizu");
                });

            modelBuilder.Entity("ZahtjevZaAnalizu", b =>
                {
                    b.HasOne("API.Entities.Doktor", "Doktor")
                        .WithMany("ZahtjeviZaAnalize")
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Tehnicar", "Tehnicar")
                        .WithMany("ZahtjeviZaAnalizu")
                        .HasForeignKey("TehnicarId");

                    b.Navigation("Doktor");

                    b.Navigation("Pacijent");

                    b.Navigation("Tehnicar");
                });

            modelBuilder.Entity("ZahtjevZaPregled", b =>
                {
                    b.HasOne("API.Entities.Doktor", "Doktor")
                        .WithMany("ZahtjeviZaPregled")
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Pacijent", "Pacijent")
                        .WithMany("ZahtjeviZaPregled")
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doktor");

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("API.Entities.Doktor", b =>
                {
                    b.Navigation("Pregledi");

                    b.Navigation("ZahtjeviZaAnalize");

                    b.Navigation("ZahtjeviZaPregled");
                });

            modelBuilder.Entity("API.Entities.Korisnik", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("API.Entities.Pacijent", b =>
                {
                    b.Navigation("Nalazi");

                    b.Navigation("Pregledi");

                    b.Navigation("Vakcinacije");

                    b.Navigation("ZahtjeviZaPregled");
                });

            modelBuilder.Entity("API.Entities.Tehnicar", b =>
                {
                    b.Navigation("Nalazi");

                    b.Navigation("ZahtjeviZaAnalizu");
                });
#pragma warning restore 612, 618
        }
    }
}
